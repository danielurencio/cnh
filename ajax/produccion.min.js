/* General global variables for using in any Function */
var chartLoaded = false;
var playingAnimation = false;
var playingAnimationPaused = false;
var playingData = { row: null, index: null, data: null };
//var timelineData = { columns: null, data: null };
var chart, map, viewMap, gPoint, gSimpleMarkerSymbol, gGraphic, gPopup, modal, lastYearSelected, lastMonthSelected, tabElement, cloudElement, wsURL;
var drawGeoPointsPosition = 0;
var gPorcentage = 0;
var sectionPosition = 0;

Date.prototype.getStrMonth = function () {
    var n = this.getMonth() + 1;
    return n <= 9 ? '0' + n : '' + n;
}

Date.prototype.getStrYear = function () {
    return this.getFullYear();
}

var tipos = function () {
    var tips = $('input[name=inpTipos]');
    var types = '';
    for (var i = 0; i < tips.length; i++) {
        if (tips[i].checked) {
            types += tips[i].value + ';';
        }
    }

    return types;
}

var category = function () {
    var opts = $('input[name=categories]');
    var category = '';
    for (var i = 0; i < opts.length; i++) {
        if (opts[i].checked) {
            category += opts[i].value + ';';
        }
    }

    return category;
}

var fields = function () {
    var words = $(cloudElement);
    var fields = '';

    if (document.getElementById('drawTotal').checked) {
        fields += 'all;';
    }
    if (document.getElementById('drawTotalA').checked) {
        fields += 'asignaciones;';
    }
    if (document.getElementById('drawTotalC').checked) {
        fields += 'contratos;';
    }

    for (var i = 0; i < words.length; i++) {
        if (words[i].getAttribute('data-word-selected') === 'true') {
            fields += words[i].innerHTML + ';';
        }
    }
    return fields;
}

$(document).ready(function () {
    // First code to run when the HTML Doc is loaded complety and is ready to run JavaScript
    modal = UIkit.modal.blockUI('Espere, trabajando...');
    var opts = readGetParameter('opts');

    if (opts === '') {
        var curYear = function () {
            var d = new Date();
            return d.getMonth() === 0 ? "" + (d.getFullYear() - 1) : "" + d.getFullYear();
        }

        var curMonth = function () {
            var d = new Date().getMonth();
            d === 0 ? d = 12 : d = d;
            return d > 9 ? "" + d : "0" + d;
        }

        document.getElementById('dataTypeGas').checked = false;
        document.getElementById('dataTypeOil').checked = true;
        document.getElementById('dataOperator').value = 'all';
        document.getElementById('chkProduccion').checked = true;
        document.getElementById('sYear').value = '2016';
        document.getElementById('sMonth').value = '01';
        document.getElementById('eYear').value = curYear();
        document.getElementById('eMonth').value = curMonth();
        document.getElementById('graphTitle').children[0].innerHTML = 'Producción de Hidrocarburos';
    }

    setDashboardListeners();
    loadMap(function () {
        google.charts.load('current', { packages: ['corechart'], lang: 'en' });
        google.charts.setOnLoadCallback(function () {
            chart = new google.visualization.LineChart(document.getElementById('chart'));
            getCloudWords(true);
            getOperators();
        });
    });

    //var timeline = $('#timeline')[0];
    //$('#timelinebar')[0].style.width = (timeline.offsetWidth - timeline.children[0].offsetWidth - 7) + 'px';
});

/*$(window).resize(function () {
    //var timeline = $('#timeline')[0];
    //var data = buildData(timelineData.columns);

    //$('#timelinebar')[0].style.width = (timeline.offsetWidth - timeline.children[0].offsetWidth - 7) + 'px';
    //drawTimelineSections(sectionPosition);
    //data.addRows(timelineData.data);
    options.colors = getColors(false, '1.0');
    chart.draw(data, options);
});*/

/* The var options is a Global var to define the general Chart options to draw it */
var options = {
    legend: {
        position: 'bottom',
        bottom: '35px',
        textStyle: {
            color: '#000'
        }
    },
    width: '100%',
    height: '100%',
    backgroundColor: 'transparent',
    pointSize: 13,
    lineWidth: 4,
    hAxis: {
        baselineColor: '#000',
        textStyle: {
            color: '#000'
        }
    },
    vAxis: {
        baselineColor: '#000',
        textStyle: {
            color: '#000'
        },
        titleTextStyle: {
            color: '#000'
        },
        minValue: 0,
        decimalSymbol: '.',
        groupingSymbol: ',',
        pattern: '#,###.##',
        viewWindow: {
            min: 0
        }
    },
    vAxes: [
        { title: 'Petróleo (Mbd)' },
        { title: 'Gas (MMpcd)' }
    ],
    series: [
        { targetAxisIndex: 0, pointShape: 'circle', },
        { targetAxisIndex: 1, pointShape: 'square', lineDashStyle: [4, 4] }
    ], // Set an object with ID for data and property targetAxisIndex, example: {0: {targetAxisIndex: 0}, 1: {targetAxisIndex: 1}} 
    animation: {
        duration: 1000,
        easing: 'inAndOut'
    },
    chartArea: {
        width: '75%',
        top: 20,
        bottom: 50
    }
}

function setDashboardListeners() {
    // Define the trigger action to run when a user interact with any HTML Doc elements defined here
    $('#setFilter').click(function () {
        if (validateFilter()) {
            getCloudWords(false);
        }
    });

    $('#drawTotalLbl').click(function () {
        $('#drawTotal').trigger('click');
    });

    $('#drawTotal').click(function () {
        loadChart();
        drawGeoPoints();
    });

    $('#drawTotalALbl').click(function () {
        $('#drawTotal').trigger('click');
    });

    $('#drawTotalA').click(function () {
        loadChart();
        drawGeoPoints();
    });
    $('#drawTotalCLbl').click(function () {
        $('#drawTotal').trigger('click');
    });

    $('#drawTotalC').click(function () {
        loadChart();
        drawGeoPoints();
    });

    $('#dataTypeGasLbl').click(function () {
        $('#dataTypeGas').trigger('click');
    });

    $('#dataTypeGas').click(function () {
        if (validateFilter()) {
            getCloudWords(false);
            loadChart();
            drawGeoPoints();
        }

    });

    $('#dataTypeOilLbl').click(function () {
        $('#dataTypeOil').trigger('click');
    });

    $('#dataTypeOil').click(function () {
        if (validateFilter()) {
            getCloudWords(false);
            loadChart();
            drawGeoPoints();
        }

    });

    $('#chkAsignaciones').click(function () {
        if (validateFilter()) {
            getOperators()
            getCloudWords(false);
        }
    });

    $('#chkContratos').click(function () {
        if (validateFilter()) {
            getOperators()
            getCloudWords(false);
        }
    });

    $('#dataOperator').change(function () {
        if (validateFilter()) {
            getCloudWords(false);
        }
    });

    /*$('#playAnimation').click(function () {
        if (!playingAnimation) {
            playAnimation();
        } else {
            if (!playingAnimationPaused) {
                playingAnimationPaused = true;
                document.getElementById('playAnimation').innerHTML = '<i class="uk-icon-play"></i>';
                document.getElementById('playAnimation').classList.remove('button-media-pause');
            } else {
                playAnimation();
            }
        }
    });

    $('#stopAnimation').click(stopAnimation);*/

    $('#unselectFields').click(function () {
        var words = $(cloudElement);
        for (var i = 0; i < words.length; i++) {
            words[i].className = words[i].className.replace(' word-selected', '');
            words[i].style.backgroundColor = '';
            words[i].setAttribute('data-word-selected', 'false');
        }

        loadChart();
        drawGeoPoints();
    });

    $('#unselectFieldsA').click(function () {
        var words = $(cloudElement);
        for (var i = 0; i < words.length; i++) {
            words[i].className = words[i].className.replace(' word-selected', '');
            words[i].style.backgroundColor = '';
            words[i].setAttribute('data-word-selected', 'false');
        }

        loadChart();
        drawGeoPoints();
    });

    $('#searchFields').keyup(function (e) {
        var search = '';
        var words = $(cloudElement);
        e.charCode === 13 ? search = this.value : search = this.value;

        for (var i = 0; i < words.length; i++) {
            if (search === '') {
                words[i].className = words[i].className.replace(' uk-hidden', '');
            } else {
                if (words[i].innerHTML.toUpperCase().indexOf(search.toUpperCase()) > -1) {
                    words[i].className = words[i].className.replace(' uk-hidden', '');
                } else {
                    if (words[i].className.indexOf('uk-hidden') === -1) {
                        words[i].className += ' uk-hidden';
                    }
                }
            }
        }
    });

    $('#searchFieldsA').keyup(function (e) {
        var search = '';
        var words = $(cloudElement);
        e.charCode === 13 ? search = this.value : search = this.value;

        for (var i = 0; i < words.length; i++) {
            if (search === '') {
                words[i].className = words[i].className.replace(' uk-hidden', '');
            } else {
                if (words[i].innerHTML.toUpperCase().indexOf(search.toUpperCase()) > -1) {
                    words[i].className = words[i].className.replace(' uk-hidden', '');
                } else {
                    if (words[i].className.indexOf('uk-hidden') === -1) {
                        words[i].className += ' uk-hidden';
                    }
                }
            }
        }
    });

    $('[data-uk-tab]').on('click.uk.tab', function (event) {
        tabElement = event.target.innerText
        if (validateFilter()) {
            getCloudWords(false);
        }
    });

    $('#descargaCSV').click(function () {
        if (validateFilter()) {
            createCSV();
        }
    })
}

function loadMap(callback) {
    // Load a Map view from ArcGIS JS API and draw on DIV selected
    var libs = ['esri/Map', 'esri/views/MapView', 'esri/widgets/Home', 'esri/Graphic', 'esri/geometry/Point', 'esri/symbols/SimpleMarkerSymbol', 'esri/PopupTemplate'];
    require(libs, function (Map, MapView, Home, Graphic, Point, SimpleMarkerSymbol, PopupTemplate) {
        map = new Map({ basemap: 'gray' });
        viewMap = new MapView({
            center: [-102.0664336, 22.6538322],
            container: 'map',
            map: map,
            zoom: 5
        });

        var homeWidget = new Home({
            view: viewMap
        });

        viewMap.ui.add(homeWidget, 'top-left');

        gGraphic = Graphic;
        gPoint = Point;
        gSimpleMarkerSymbol = SimpleMarkerSymbol;
        gPopup = new PopupTemplate({
            title: 'Producción del campo {NOMBRE}',
            content: '{DATOS}'
        });

        viewMap.then(function () {
            callback();
        });
    });
}

function loadChart() {
    // This funciton get all data from server using filters by user and draw the chart to present data
    options.colors = getColors(false, '1.0');
    var opts = options;

    var type = '';
    if (document.getElementById('dataTypeGas').checked && document.getElementById('dataTypeOil').checked) {
        type = 'oil;gas;';
    } else if (document.getElementById('dataTypeGas').checked) {
        type = 'gas';
    } else if (document.getElementById('dataTypeOil').checked) {
        type = 'oil';
    }

    var sDate = document.getElementById('sYear').value + '-' + document.getElementById('sMonth').value + '-01';
    var eDate = document.getElementById('eYear').value + '-' + document.getElementById('eMonth').value + '-01';
    var operator = document.getElementById('dataOperator').value;

    if (fields().length === 0) {
        var columns = [['string', ''], ['number', 'Petróleo'], ['number', 'Gas']];
        var data = buildData(columns);
        data.addRows([['', 0, 0]]);
        chart.draw(data, opts);

        return;
    }

    var url;
    switch (tabElement) {
        case 'Campos':
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_campos.py';
            break;
        case 'Id Asignaciones/Contratos':
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_asigcont.py';
            break;
        default:
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_campos.py';
            break;
    }

    $.ajax({
        timeout: 25000,
        type: 'POST',
        url: url,
        data: { type: type, sdate: sDate, edate: eDate, contract: tipos(), operator: operator, category: category(), field: fields() },
        beforeSend: function () {
            if (!chartLoaded) {
                var columns = [['string', ''], ['number', 'Petróleo'], ['number', 'Gas']];
                var data = buildData(columns);
                data.addRows([['', 0, 0]]);
                chart.draw(data, opts);
                chartLoaded = true;
            }

            $('#spinner').toggleClass('uk-hidden');
        },
        success: function (response) {
            try {
                var obj = response;
                var columns = [['date', 'Date']];
                var series = [];

                for (var i = 0; i < obj.columns.length; i++) {
                    if (obj.columns[i].type === 'oil') {
                        columns.push(['number', obj.columns[i].name + ' (P)']);
                        series.push({ targetAxisIndex: 0, pointShape: 'circle' });
                    } else {
                        columns.push(['number', obj.columns[i].name + ' (G)']);
                        series.push({ targetAxisIndex: 1, pointShape: 'square', lineDashStyle: [10, 2] });
                    }
                }

                var data = buildData(columns);
                opts.series = series;

                for (var i = 0; i < obj.data.length; i++) {
                    obj.data[i][0] = new Date(obj.data[i][0].split('-').join('/'));
                }

                if (obj.data.length > 30 && obj.data.length < 60) {
                    opts.pointSize = 5;
                    opts.lineWidth = 2;
                    opts.series.lineDashStyle = [10, 5];
                } else if (obj.data.length > 60) {
                    opts.pointSize = 0;
                    opts.lineWidth = 2;
                    opts.series.lineDashStyle = [10, 10];
                } else {
                    opts.pointSize = 13;
                    opts.lineWidth = 4;
                    opts.series.lineDashStyle = [4, 4];
                }

                data.addRows(obj.data);
                chart.draw(data, opts);

                //timelineData.columns = columns;
                //timelineData.data = obj.data;

                //drawTimelineSections(0);
            } catch (e) {
                getError(e, 'Hubo un problema al procesar la información obtenida.');
            }

            modal.hide();
            $('#spinner').toggleClass('uk-hidden');
        },
        error: function (xhr, status, error) {
            getError(error, 'No se encontro el recurso.');
            modal.hide();
            $('#spinner').toggleClass('uk-hidden');
        }
    });
}

function drawGeoPoints() {
    // Get geopoints data from server and parse on Map using ArcGIS JS API to draw those geopoints
    var type = '';
    if (document.getElementById('dataTypeGas').checked && document.getElementById('dataTypeOil').checked) {
        type = 'oil;gas;';
    } else if (document.getElementById('dataTypeGas').checked) {
        type = 'gas';
    } else if (document.getElementById('dataTypeOil').checked) {
        type = 'oil';
    }
    var sDate = document.getElementById('sYear').value + '-' + document.getElementById('sMonth').value + '-01';
    var eDate = document.getElementById('eYear').value + '-' + document.getElementById('eMonth').value + '-01';
    var operator = document.getElementById('dataOperator').value;
    var allFields = fields().replace('all', 'Total Nacional').slice(0, -1).split(';').sort();
    drawGeoPointsPosition = 0;

    if (fields().length === 0) {
        viewMap.graphics.removeAll();
        return;
    }

    drawOnMap(type, sDate, eDate, operator, allFields);
}

function drawOnMap(type, sDate, eDate, operator, fields) {
    for (var i = 0; i < fields.length; i++) {
        if (fields[i] === 'Total Nacional') {
            fields[i] = 'all';
        }
    }

    var url;
    switch (tabElement) {
        case 'Campos':
            url = 'http://portal.cnih.cnh.gob.mx/api/ubicaciones_campos.py';
            break;
        case 'Id Asignaciones/Contratos':
            url = 'http://portal.cnih.cnh.gob.mx/api/ubicaciones_asigcont.py';
            break;
        default:
            url = 'http://portal.cnih.cnh.gob.mx/api/ubicaciones_campos.py';
            break;
    }

    $.ajax({
        timeout: 25000,
        type: 'POST',
        url: url,
        data: { type: type, sdate: sDate, edate: eDate, contract: tipos(), operator: operator, category: category(), field: fields.join(';') + ';' },
        success: function (response) {
            try {
                var data = response;
                var graphics = [];
                var size = function (production) {
                    var size = ((Math.round(production)));

                    if (size > 45) {
                        return '45px';
                    } else if (size < 7) {
                        return '7px';
                    }

                    return size + 'px';
                }

                var getColor = function (type) {
                    return type === 'oil' ? [255, 255, 255] : [255, 255, 255, 0.6];
                }

                var getUnit = function (type) {
                    return type === 'oil' ? ' mbd' : ' mmpcd';
                }

                var getType = function (type) {
                    return type === 'oil' ? 'Aceite' : 'Gas';
                }

                for (var i = 0; i < data.length; i++) {
                    var currData = JSON.parse(data[i]);
                    for (var j = 0; j < currData.length; j++) {
                        var point = new gPoint({
                            longitude: currData[j].longitude,
                            latitude: currData[j].latitude
                        });

                        var marker = new gSimpleMarkerSymbol({
                            style: currData[j].type === 'oil' ? 'circle' : 'square',
                            color: currData[j].type === 'oil' ? getColors(true, 0.4)[drawGeoPointsPosition] : [255, 255, 255, 0.2],
                            size: size(currData[j].production),
                            outline: {
                                color: currData[j].type === 'oil' ? getColor(currData[j].type) : getColors(true, 1)[drawGeoPointsPosition],
                                width: 1
                            }
                        });

                        var pointGraphic = new gGraphic({
                            geometry: point,
                            symbol: marker,
                            popupTemplate: gPopup,
                            attributes: {
                                NOMBRE: currData[j].name,
                                DATOS: '<b>Tipo: </b>' + getType(currData[j].type) + '<br><b>Producción:</b> ' + currData[j].production + getUnit(currData[j].type) + '<br><b>Fecha:</b> ' + currData[j].date
                            }
                        });

                        graphics.push(pointGraphic);
                    }

                    drawGeoPointsPosition === (getColors(true, 0.4).length - 1) ? drawGeoPointsPosition = 0 : drawGeoPointsPosition++;
                }

                viewMap.graphics.removeAll();
                viewMap.graphics.addMany(graphics);
            } catch (e) {
                drawGeoPointsPosition === (getColors(true, 0.4).length - 1) ? drawGeoPointsPosition = 0 : drawGeoPointsPosition++;
                getError(e, 'Hubo un problema al procesar la información obtenida.');
            }
        },
        error: function (xhr, status, error) {
            drawGeoPointsPosition === (getColors(true, 0.4).length - 1) ? drawGeoPointsPosition = 0 : drawGeoPointsPosition++;
            getError(error, 'No se encontro el recurso.');
        }
    });
}

function getCloudWords(firstTime) {
    // Call server to get an Array with all Fields using the Filters. Those objects are printed on HTML Doc and parse with jquery.tagcloud library to create a Wordcloud.
    var type = '';
    if (document.getElementById('dataTypeGas').checked && document.getElementById('dataTypeOil').checked) {
        type = 'oil;gas;';
    } else if (document.getElementById('dataTypeGas').checked) {
        type = 'gas';
    } else if (document.getElementById('dataTypeOil').checked) {
        type = 'oil';
    }
    var sDate = document.getElementById('sYear').value + '-' + document.getElementById('sMonth').value + '-01';
    var eDate = document.getElementById('eYear').value + '-' + document.getElementById('eMonth').value + '-01';
    var operator = document.getElementById('dataOperator').value;
    var wordsSelected = [];

    var url;
    var element;
    switch (tabElement) {
        case 'Campos':
            url = 'http://portal.cnih.cnh.gob.mx/api/nombres_campos.py';
            cloudElement = '#wordCloud a';
            element = 'wordCloud';
            break;
        case 'Id Asignaciones/Contratos':
            url = 'http://portal.cnih.cnh.gob.mx/api/nombres_asigcont.py';
            cloudElement = '#wordCloudA a';
            element = 'wordCloudA';
            break;
        default:
            url = 'http://portal.cnih.cnh.gob.mx/api/nombres_campos.py';
            cloudElement = '#wordCloud a';
            element = 'wordCloud';
            break;
    }

    $.ajax({
        timeout: 25000,
        type: 'POST',
        url: url,
        data: { type: type, sdate: sDate, edate: eDate, contract: tipos(), operator: operator, category: category() },
        dataType: 'json',
        beforeSend: function () {
            var words = $(cloudElement);
            for (var i = 0; i < words.length; i++) {
                if (words[i].getAttribute('data-word-selected') === 'true') {
                    wordsSelected.push(words[i].innerHTML);
                }
            }

            $(cloudElement).unbind();
            document.getElementById(element).innerHTML = '<div class="uk-flex uk-flex-middle uk-flex-center" style="height: 100%;"><div><i class="uk-icon-spin uk-icon-large uk-icon-refresh"></i></div></div>';
        },
        success: function (response) {
            try {
                var data = JSON.parse(response);
                var wordClouds = document.getElementById(element);
                wordClouds.innerHTML = '';

                for (var i = 0; i < data.length; i++) {
                    var clsWord = '';
                    data[i].type === 'Aguas someras' ? clsWord = 'wordCloud-water-font' : clsWord = 'wordCloud-onshore-font';

                    wordClouds.innerHTML += '<a href="#" class="' + clsWord + '" rel="' + (data[i].size + 1) + '" data-word-selected="false">' + data[i].name + '</a>\n';
                }

                var tagsize = data.length === 1 ? { start: 22, end: 22, unit: 'px' } : { start: 8, end: 22, unit: 'px' }
                $(cloudElement).tagcloud({
                    size: tagsize
                });

                $(cloudElement).click(setFieldSelected);
                var words = $(cloudElement);

                if (!firstTime) {
                    for (var i = 0; i < words.length; i++) {
                        for (var j = 0; j < wordsSelected.length; j++) {
                            if (words[i].innerHTML === wordsSelected[j]) {
                                words[i].className += ' word-selected';
                                words[i].setAttribute('data-word-selected', 'true');
                            }
                        }
                    }

                    applyStyleToWords();
                }

                loadChart();
                drawGeoPoints();
            } catch (e) {
                console.log(e);
            }
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    })
}

function setFieldSelected() {
    // This function apply filters for charts when the user clicked on any field on word cloud
    if (this.getAttribute('data-word-selected') === 'false') {
        this.setAttribute('data-word-selected', 'true');
        this.className += ' word-selected';
    } else {
        this.style.backgroundColor = '';
        this.className = this.className.replace(' word-selected', '');
        this.setAttribute('data-word-selected', 'false');
    }

    loadChart();
    drawGeoPoints();
    applyStyleToWords();
}

function applyStyleToWords() {
    // Get all words selected from words cloud and apply the color for the graphic selected
    var colors = getColors(false, null, true);
    var colorPosition = 0;
    var allFields = fields().replace('all', 'Total Nacional').slice(0, -1).split(';').sort();
    var words = $(cloudElement);
    for (var i = 0; i < allFields.length; i++) {
        if (allFields[i] !== 'Total Nacional') {
            for (var j = 0; j < words.length; j++) {
                if (allFields[i] === words[j].innerHTML) {
                    words[j].style.backgroundColor = colors[colorPosition];
                    colorPosition === (colors.length - 1) ? colorPosition = 0 : colorPosition++;
                }
            }
        } else {
            colorPosition === (colors.length - 1) ? colorPosition = 0 : colorPosition++;
        }
    }
}

/*function playAnimation() {
    // This function take the last consult response saved and play with an auto animation, loading the first data value and add every seconds the next data.
    if (timelineData.columns != null && timelineData.data != null) {
        options.colors = getColors(false, '1.0');
        var data;
        var timeline = document.getElementById('timelinebar').children[0];
        var stopAnimation = document.getElementById('stopAnimation');
        var playAnimation = document.getElementById('playAnimation');

        var playFrame = function (row, index, pasedSections) {
            if (!playingAnimation) {
                return;
            }

            if (playingAnimationPaused) {
                playingData.row = row;
                playingData.index = index;
                playingData.data = data;
                return;
            }

            var next = Math.round(parseFloat(timeline.parentElement.style.width) * (gPorcentage * (index - pasedSections))) + 'px';
            playingPosition = index;

            document.getElementById('eYear').value = timelineData.data[index][0].getStrYear();
            document.getElementById('eMonth').value = timelineData.data[index][0].getStrMonth();

            //drawGeoPoints();

            data.addRow(row);
            chart.draw(data, options);

            if (next === timeline.parentElement.style.width && index < (timelineData.data.length - 1)) {
                pasedSections += document.getElementById('timeline-sections').childElementCount / 2;
                setTimeout(function () {
                    //drawTimelineSections(index + 1);
                }, 2000);
            }

            timeline.style.width = next;

            if (index < (timelineData.data.length - 1)) {
                setTimeout(function () {
                    var i = (index + 1);
                    sectionPosition = i;
                    playFrame(timelineData.data[i], i, pasedSections);
                }, 750);
            } else if (index == (timelineData.data.length - 1)) {
                setTimeout(function () {
                    $('.block-interface').toggleClass('uk-hidden');
                    playingAnimation = false;
                    playingPosition = 0;
                    sectionPosition = 0;
                    stopAnimation.disabled = true;
                    stopAnimation.classList.add('button-media-disabled');
                    playAnimation.innerHTML = '<i class="uk-icon-play"></i>';
                    playAnimation.classList.remove('button-media-pause');
                    timeline.style.width = '0px';
                    //drawTimelineSections(0);
                }, 1000);
            }
        }

        if (playingAnimationPaused) {
            playingAnimationPaused = false;
            data = playingData.data;
            playAnimation.innerHTML = '<i class="uk-icon-pause"></i>';
            playAnimation.classList.add('button-media-pause');
            playFrame(playingData.row, playingData.index, 0);
        } else {
            data = buildData(timelineData.columns);
            lastYearSelected = document.getElementById('eYear').value;
            lastMonthSelected = document.getElementById('eMonth').value;
            playingAnimation = true;
            stopAnimation.disabled = false;
            stopAnimation.classList.remove('button-media-disabled');
            playAnimation.innerHTML = '<i class="uk-icon-pause"></i>';
            playAnimation.classList.add('button-media-pause');

            $('.block-interface').toggleClass('uk-hidden');
            playFrame(timelineData.data[0], 0, 0);
        }
    }
}

function stopAnimation() {
    // This function stop the animation when is playing and restore the chart and map to last loaded data
    var data = buildData(timelineData.columns);
    var stopAnimation = document.getElementById('stopAnimation');
    var playAnimation = document.getElementById('playAnimation');

    playingAnimation = false;
    playingAnimationPaused = false;
    playingPosition = 0;
    document.getElementById('eYear').value = lastYearSelected;
    document.getElementById('eMonth').value = lastMonthSelected;
    stopAnimation.disabled = true;
    stopAnimation.classList.add('button-media-disabled');
    playAnimation.innerHTML = '<i class="uk-icon-play"></i>';
    playAnimation.classList.remove('button-media-pause');

    $('#timelinebar')[0].children[0].style.width = '0px';
    data.addRows(timelineData.data);
    options.colors = getColors(false, '1.0');
    chart.draw(data, options);
    drawGeoPoints();
    $('.block-interface').toggleClass('uk-hidden');
}

function drawTimelineSections(next) {
    // This function get all dates from filter and draw every date in the timeline
    if (next >= (timelineData.data.length - 1) && timelineData.data.length > 1) {
        return;
    }

    var timeline = document.getElementById('timeline-sections');
    var sections = (timelineData.data.length - 1) - next;
    var porcentage = 0;

    if (sections > 12) {
        sections = 11;
    }

    timeline.innerHTML = '';
    porcentage = (100 / sections) / 100;
    gPorcentage = porcentage;

    for (var i = 0; i <= sections; i++) {
        var date = timelineData.data[i + next][0];
        var section = document.createElement('div');
        var dateStr = document.createElement('div');
        var left = function () {
            var px = 0;
            i === (timelineData.data.length - 1) ? px = 3 : px = 0;

            return (Math.round(parseFloat(timeline.offsetWidth) * (porcentage * i)) - px) + 'px';
        }

        section.className = 'timeline-section';
        dateStr.className = 'timeline-date';
        section.style.left = left();
        dateStr.style.left = left();
        dateStr.innerHTML = date.getFullYear() + '-' + date.getStrMonth();
        timeline.appendChild(section);
        timeline.appendChild(dateStr);
    }
}*/

function validateFilter() {
    // Check if all filter data are correctly selected

    var types = $('input[name=inpTipos]');
    var unchecked = types.length;
    for (var i = 0; i < types.length; i++) {
        if (!types[i].checked) {
            unchecked--;
        }
    }

    if (unchecked === 0) {
        getError('', 'Debe seleccionar al menos un Régimen');
        return false;
    }

    /*if (unchecked === 1 && types[0].checked) {
        if (document.getElementById('dataOperator').value != 'Petróleos Mexicanos' && document.getElementById('dataOperator').value != 'all') {
            getError('', 'Únicamente Petróleos Mexicanos tiene asignaciones');
            return false;
        }
    }*/

    if (document.getElementById('dataOperator').value === '') {
        getError('', 'Debe de seleccionar un operador');
        return false;
    }

    var sYear = document.getElementById('sYear').value;
    var eYear = document.getElementById('eYear').value;

    if (sYear === '') {
        getError('', 'Debe de escoger el año inicial');
        return;
    }

    if (eYear === '') {
        getError('', 'Debe de escoger el año final');
        return;
    }

    if (sYear > eYear) {
        getError('', 'El año inicial no puede ser superior al final');
        return false;
    }

    var sMonth = document.getElementById('sMonth').value;
    var eMonth = document.getElementById('eMonth').value;

    if (sMonth === '') {
        getError('', 'Debe seleccionar el mes inicial');
        return false;
    }

    if (eMonth === '') {
        getError('', 'Debe seleccionar el mes final');
        return false;
    }

    if (sYear === eYear && sMonth === eMonth) {
        getError('', 'Debe de seleccionar al menos un periodo mínimo de dos meses');
        return false;
    }

    if (sYear === eYear && sMonth > eMonth) {
        getError('', 'Si el año es el mismo, el mes inicial no puede ser posterior al mes final');
        return false;
    }

    if (!document.getElementById('dataTypeGas').checked && !document.getElementById("dataTypeOil").checked) {
        getError('', 'Debe de seleccionar al menos un Hidrocarburo');
        return false;
    }

    return true;
}

function getError(error, msg) {
    // Get the error and messega, the error is printed on console only if the system are in Debug mode, the message is showed to the user
    if (debugMode) {
        console.log(error);
    }
    UIkit.notify(msg, { status: 'danger' });
}

function buildData(columns) {
    // Build a DataTable object from Google Charts API to draw into a chart previously loaded
    var data = new google.visualization.DataTable();
    for (var i = 0; i < columns.length; i++) {
        data.addColumn(columns[i][0], columns[i][1]);
    }

    return data;
}

function getColors(inRGB, transparency, returnOriginal) {
    var colors = ['#e60073', '#ff8610', '#CDDC39', '#A1887F', '#4ead5a', '#f5c142', '#E57373', '#4dafeb'];
    var newColors = [];

    if (returnOriginal) {
        return colors;
    }

    if (inRGB) {
        for (var i = 0; i < colors.length; i++) {
            colors[i] = hexToRgb(colors[i], transparency);
        }
    }

    if (document.getElementById('dataTypeGas').checked && document.getElementById('dataTypeOil').checked) {
        for (var i = 0; i < colors.length; i++) {
            newColors.push(colors[i]);
            newColors.push(colors[i]);
        }

        return newColors;
    }

    return colors;
}

function hexToRgb(hex, transparency) {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16),
        transparency
    ] : null;
}

function createCSV() {
    var opts = options;

    var type = '';
    if (document.getElementById('dataTypeGas').checked && document.getElementById('dataTypeOil').checked) {
        type = 'oil;gas;';
    } else if (document.getElementById('dataTypeGas').checked) {
        type = 'gas';
    } else if (document.getElementById('dataTypeOil').checked) {
        type = 'oil';
    }

    var sDate = document.getElementById('sYear').value + '-' + document.getElementById('sMonth').value + '-01';
    var eDate = document.getElementById('eYear').value + '-' + document.getElementById('eMonth').value + '-01';
    var operator = document.getElementById('dataOperator').value;

    if (fields().length === 0) {
        var columns = [['string', ''], ['number', 'Petróleo'], ['number', 'Gas']];
        var data = buildData(columns);
        data.addRows([['', 0, 0]]);
        chart.draw(data, opts);

        return;
    }

    var url;
    switch (tabElement) {
        case 'Campos':
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_campos_descarga.py';
            break;
        case 'Id Asignaciones/Contratos':
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_asigcont_descarga.py';
            break;
        default:
            url = 'http://portal.cnih.cnh.gob.mx/api/produccion_campos_descarga.py';
            break;
    }

    $.ajax({
        timeout: 25000,
        type: 'POST',
        url: url,
        data: { type: type, sdate: sDate, edate: eDate, contract: tipos(), operator: operator, category: category(), field: fields() },
        beforeSend: function () {
            $('#spinner').toggleClass('uk-hidden');
        },
        success: function (response) {
            try {
                var data = response;
                var csvContent = "data:text/csv;charset=utf-8,";
                data.forEach(function (infoArray, index) {

                    dataString = infoArray.join(",");
                    csvContent += index < data.length ? dataString + "\n" : dataString;
                });

                var encodedUri = encodeURI(csvContent);
                var link = document.createElement("a");
                link.setAttribute("href", encodedUri);
                link.setAttribute("download", "produccion.csv");
                document.body.appendChild(link); // Required for FF

                link.click();
                $('#spinner').toggleClass('uk-hidden');
            } catch (e) {
                console.log("Error: " + e);
                $('#spinner').toggleClass('uk-hidden');
            }
        },
        error: function (xhr, status, error) {
            getError(error, 'No se encontro el recurso.');
            modal.hide();
            $('#spinner').toggleClass('uk-hidden');
        }
    });

}

function getOperators() {
    $.ajax({
        timeout: 25000,
        type: 'POST',
        url: 'http://portal.cnih.cnh.gob.mx/api/nombres_operadores.py',
        data: { category: category(), contract: tipos() },
        beforeSend: function () {
            $('#spinner').toggleClass('uk-hidden');
        },
        success: function (response) {
            try {
                $('#dataOperator').empty()
                var option = '';
                option += '<option value="1">Todos</option>';
                for (var i = 0; i < response.length; i++) {
                    option += '<option value="' + response[i][1] + '">' + response[i][0] + '</option>';
                }

                $('#dataOperator').append(option);
                $('#spinner').toggleClass('uk-hidden');
            } catch (e) {
                console.log("Error: " + e);
                $('#spinner').toggleClass('uk-hidden');
            }
        },
        error: function (xhr, status, error) {
            getError(error, 'No se encontro el recurso.');
            modal.hide();
            $('#spinner').toggleClass('uk-hidden');
        }
    });
}